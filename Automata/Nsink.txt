
************ DFA

DFA
Q = [0,15)
S = { 0 }
F = { 1  6  8  9  10 }
Transitions = 
0->{ '0'->1  '1'->2 }
1->{ '0'->3  '1'->4 }
2->{ '0'->5  '1'->6 }
3->{ '0'->7  '1'->8 }
4->{ '0'->9  '1'->10 }
5->{ '0'->11  '1'->12 }
6->{ '0'->13  '1'->14 }
7->{}
8->{}
9->{}
10->{}
11->{}
12->{}
13->{}
14->{}

current = -1

 is the DFA Usefulf ?: 0

The combination for all the out labels of State's£ºC = { '0'  '1' }
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Initialize partitions, E0:
StateEqRel
{ 0  2  3  4  5  7  11  12  13  14 }
{ 1  6  8  9  10 }

Initialize L repr = {F}:
{ 1 }
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 2 0 0 0 0 0 0 0 0 0 0 0 0 0
=========================== Iterate: k = 1
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0  2  3  4  5  7  11  12  13  14 }
{ 1  6  8  9  10 }

pick [q] in L:([q],a)=([1],'1')
split [p] w.r.t. ([1],'1')
===split[0] w.r.t. ([1],'1')
new split of [0] is [2]
[p]={ 0  5  7  11  12  13  14 }
[r]={ 2  3  4 }
p and r are the new representatives. Now update L with the smallest of [0] and [2]
using [r] = [2],L[r]=C.size();
after update L: 
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 1 2 0 0 0 0 0 0 0 0 0 0 0 0
===split[1] w.r.t. ([1],'1')
new split of [1] is [-1]
=========================== Iterate: k = 2
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 2 0 0 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0  5  7  11  12  13  14 }
{ 1  6  8  9  10 }
{ 2  3  4 }

pick [q] in L:([q],a)=([1],'0')
split [p] w.r.t. ([1],'0')
===split[0] w.r.t. ([1],'0')
new split of [0] is [5]
[p]={ 0 }
[r]={ 5  7  11  12  13  14 }
p and r are the new representatives. Now update L with the smallest of [0] and [5]
using [p] = [0],L[r]=L[p]; L[p]=C.size();
after update L: 
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
2 0 2 0 0 0 0 0 0 0 0 0 0 0 0
===split[1] w.r.t. ([1],'0')
new split of [1] is [-1]
===split[2] w.r.t. ([1],'0')
new split of [2] is [4]
[p]={ 2  3 }
[r]={ 4 }
p and r are the new representatives. Now update L with the smallest of [2] and [4]
using [r] = [4],L[r]=C.size();
after update L: 
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
2 0 2 0 2 0 0 0 0 0 0 0 0 0 0
=========================== Iterate: k = 3
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
1 0 2 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1  6  8  9  10 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }

pick [q] in L:([q],a)=([0],'1')
split [p] w.r.t. ([0],'1')
===split[0] w.r.t. ([0],'1')
new split of [0] is [-1]
===split[1] w.r.t. ([0],'1')
new split of [1] is [-1]
===split[2] w.r.t. ([0],'1')
new split of [2] is [-1]
===split[4] w.r.t. ([0],'1')
new split of [4] is [-1]
===split[5] w.r.t. ([0],'1')
new split of [5] is [-1]
=========================== Iterate: k = 4
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 2 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1  6  8  9  10 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }

pick [q] in L:([q],a)=([0],'0')
split [p] w.r.t. ([0],'0')
===split[0] w.r.t. ([0],'0')
new split of [0] is [-1]
===split[1] w.r.t. ([0],'0')
new split of [1] is [-1]
===split[2] w.r.t. ([0],'0')
new split of [2] is [-1]
===split[4] w.r.t. ([0],'0')
new split of [4] is [-1]
===split[5] w.r.t. ([0],'0')
new split of [5] is [-1]
=========================== Iterate: k = 5
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 1 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1  6  8  9  10 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }

pick [q] in L:([q],a)=([2],'1')
split [p] w.r.t. ([2],'1')
===split[0] w.r.t. ([2],'1')
new split of [0] is [-1]
===split[1] w.r.t. ([2],'1')
new split of [1] is [-1]
===split[2] w.r.t. ([2],'1')
new split of [2] is [-1]
===split[4] w.r.t. ([2],'1')
new split of [4] is [-1]
===split[5] w.r.t. ([2],'1')
new split of [5] is [-1]
=========================== Iterate: k = 6
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 0 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1  6  8  9  10 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }

pick [q] in L:([q],a)=([2],'0')
split [p] w.r.t. ([2],'0')
===split[0] w.r.t. ([2],'0')
new split of [0] is [-1]
===split[1] w.r.t. ([2],'0')
new split of [1] is [6]
[p]={ 1 }
[r]={ 6  8  9  10 }
p and r are the new representatives. Now update L with the smallest of [1] and [6]
using [p] = [1],L[r]=L[p]; L[p]=C.size();
after update L: 
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 2 0 0 2 0 0 0 0 0 0 0 0 0 0
===split[2] w.r.t. ([2],'0')
new split of [2] is [-1]
===split[4] w.r.t. ([2],'0')
new split of [4] is [-1]
===split[5] w.r.t. ([2],'0')
new split of [5] is [-1]
=========================== Iterate: k = 7
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 1 0 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }
{ 6  8  9  10 }

pick [q] in L:([q],a)=([1],'1')
split [p] w.r.t. ([1],'1')
===split[0] w.r.t. ([1],'1')
new split of [0] is [-1]
===split[1] w.r.t. ([1],'1')
new split of [1] is [-1]
===split[2] w.r.t. ([1],'1')
new split of [2] is [-1]
===split[4] w.r.t. ([1],'1')
new split of [4] is [-1]
===split[5] w.r.t. ([1],'1')
new split of [5] is [-1]
===split[6] w.r.t. ([1],'1')
new split of [6] is [-1]
=========================== Iterate: k = 8
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 0 0 2 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }
{ 6  8  9  10 }

pick [q] in L:([q],a)=([1],'0')
split [p] w.r.t. ([1],'0')
===split[0] w.r.t. ([1],'0')
new split of [0] is [-1]
===split[1] w.r.t. ([1],'0')
new split of [1] is [-1]
===split[2] w.r.t. ([1],'0')
new split of [2] is [-1]
===split[4] w.r.t. ([1],'0')
new split of [4] is [-1]
===split[5] w.r.t. ([1],'0')
new split of [5] is [-1]
===split[6] w.r.t. ([1],'0')
new split of [6] is [-1]
=========================== Iterate: k = 9
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }
{ 6  8  9  10 }

pick [q] in L:([q],a)=([4],'1')
split [p] w.r.t. ([4],'1')
===split[0] w.r.t. ([4],'1')
new split of [0] is [-1]
===split[1] w.r.t. ([4],'1')
new split of [1] is [-1]
===split[2] w.r.t. ([4],'1')
new split of [2] is [-1]
===split[4] w.r.t. ([4],'1')
new split of [4] is [-1]
===split[5] w.r.t. ([4],'1')
new split of [5] is [-1]
===split[6] w.r.t. ([4],'1')
new split of [6] is [-1]
=========================== Iterate: k = 10
L:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Partitions:
StateEqRel
{ 0 }
{ 1 }
{ 2  3 }
{ 4 }
{ 5  7  11  12  13  14 }
{ 6  8  9  10 }

pick [q] in L:([q],a)=([4],'0')
split [p] w.r.t. ([4],'0')
===split[0] w.r.t. ([4],'0')
new split of [0] is [-1]
===split[1] w.r.t. ([4],'0')
new split of [1] is [-1]
===split[2] w.r.t. ([4],'0')
new split of [2] is [-1]
===split[4] w.r.t. ([4],'0')
new split of [4] is [-1]
===split[5] w.r.t. ([4],'0')
new split of [5] is [-1]
===split[6] w.r.t. ([4],'0')
new split of [6] is [-1]

************ minDFA

DFA
Q = [0,6)
S = { 0 }
F = { 1  5 }
Transitions = 
0->{ '0'->1  '1'->2 }
1->{ '0'->2  '1'->3 }
2->{ '0'->4  '1'->5 }
3->{ ['0','1']->5 }
4->{ ['0','1']->4 }
5->{ ['0','1']->4 }

current = -1

